'use client';

import { useState } from 'react';
import { Sparkles, Loader2, Wand2 } from 'lucide-react';
import { generateImageFromPrompt } from '@/ai/flows/generate-image-from-prompt';
import { suggestDesignElements } from '@/ai/flows/suggest-design-elements';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import Image from 'next/image';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';

const AIPanel = () => {
  const [prompt, setPrompt] = useState('');
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  
  const [suggestionPrompt, setSuggestionPrompt] = useState('');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [isSuggesting, setIsSuggesting] = useState(false);
  
  const { toast } = useToast();

  const handleGenerateImage = async () => {
    if (!prompt) {
      toast({
        title: 'Prompt is empty',
        description: 'Please enter a prompt to generate an image.',
        variant: 'destructive',
      });
      return;
    }

    setIsGenerating(true);
    setGeneratedImage(null);

    try {
      const result = await generateImageFromPrompt({ prompt });
      setGeneratedImage(result.image);
    } catch (error) {
      console.error(error);
      toast({
        title: 'Error generating image',
        description: 'An unexpected error occurred. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  };
  
  const handleSuggestElements = async () => {
    if (!suggestionPrompt) {
      toast({
        title: 'Prompt is empty',
        description: 'Please enter a prompt for suggestions.',
        variant: 'destructive',
      });
      return;
    }
    
    setIsSuggesting(true);
    setSuggestions([]);

    try {
      const result = await suggestDesignElements({ prompt: suggestionPrompt });
      setSuggestions(result.suggestions);
    } catch (error) {
        console.error(error);
        toast({
            title: 'Error getting suggestions',
            description: 'An unexpected error occurred. Please try again.',
            variant: 'destructive',
        });
    } finally {
        setIsSuggesting(false);
    }
  };

  return (
    <div className="p-4 space-y-6">
      <Accordion type="single" collapsible defaultValue="item-1" className="w-full">
        <AccordionItem value="item-1">
          <AccordionTrigger className="text-base font-semibold">
            <div className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-primary" />
              <span>AI Image Generator</span>
            </div>
          </AccordionTrigger>
          <AccordionContent className="pt-4 space-y-4">
            <Textarea
              placeholder="e.g., A cute cat wearing a superhero cape, cinematic style"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              rows={3}
            />
            <Button onClick={handleGenerateImage} disabled={isGenerating} className="w-full">
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-4 w-4" />
                  Generate Image
                </>
              )}
            </Button>
            {isGenerating && (
                <div className="aspect-square bg-muted rounded-lg flex items-center justify-center">
                    <Loader2 className="h-8 w-8 text-muted-foreground animate-spin" />
                </div>
            )}
            {generatedImage && (
              <Card className="overflow-hidden">
                <CardContent className="p-0">
                  <Image
                    src={generatedImage}
                    alt="Generated by AI"
                    width={250}
                    height={250}
                    className="w-full h-auto object-cover"
                  />
                </CardContent>
              </Card>
            )}
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value="item-2">
          <AccordionTrigger className="text-base font-semibold">
             <div className="flex items-center gap-2">
              <Wand2 className="h-5 w-5 text-primary" />
              <span>Design Suggestions</span>
            </div>
          </AccordionTrigger>
          <AccordionContent className="pt-4 space-y-4">
             <Textarea
              placeholder="e.g., A poster for a summer music festival"
              value={suggestionPrompt}
              onChange={(e) => setSuggestionPrompt(e.target.value)}
              rows={3}
            />
            <Button onClick={handleSuggestElements} disabled={isSuggesting} className="w-full">
              {isSuggesting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Thinking...
                </>
              ) : (
                'Get Suggestions'
              )}
            </Button>
            {suggestions.length > 0 && (
                <div className="flex flex-wrap gap-2">
                    {suggestions.map((suggestion, index) => (
                        <Badge key={index} variant="secondary" className="cursor-pointer hover:bg-primary/20">{suggestion}</Badge>
                    ))}
                </div>
            )}
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  );
};

export default AIPanel;
